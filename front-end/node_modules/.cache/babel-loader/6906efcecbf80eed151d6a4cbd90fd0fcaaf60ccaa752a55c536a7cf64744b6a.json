{"ast":null,"code":"import { createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport { apiSlice } from \"../api/apiSlice\";\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst initialState = postsAdapter.getInitialState();\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getPosts: builder.query({\n      query: () => '/posts',\n      transformResponse: responseData => {\n        let min = 1;\n        const loadedPosts = responseData.map(post => {\n          if (!(post !== null && post !== void 0 && post.date)) post.date = sub(new Date(), {\n            minutes: min++\n          }).toISOString();\n          if (!(post !== null && post !== void 0 && post.reactions)) post.reactions = {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0\n          };\n          return post;\n        });\n        return postsAdapter.setAll(initialState, loadedPosts);\n      },\n      providesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: \"LIST\"\n      }, ...result.ids.map(id => ({\n        type: 'Post',\n        id\n      }))]\n    }),\n    getPostsByUserId: builder.query({\n      query: id => `/postsbyuserid/?userId=${id}`,\n      transformResponse: responseData => {\n        let min = 1;\n        const loadedPosts = responseData.map(post => {\n          if (!(post !== null && post !== void 0 && post.date)) post.date = sub(new Date(), {\n            minutes: min++\n          }).toISOString();\n          if (!(post !== null && post !== void 0 && post.reactions)) post.reactions = {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0\n          };\n          return post;\n        });\n        return postsAdapter.setAll(initialState, loadedPosts);\n      },\n      providesTags: (result, error, arg) => [...result.ids.map(id => ({\n        type: 'Post',\n        id\n      }))]\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: {\n          ...initialPost,\n          userId: Number(initialPost.userId),\n          date: new Date().toISOString(),\n          reactions: {\n            thumbsUp: 0,\n            wow: 0,\n            heart: 0,\n            rocket: 0,\n            coffee: 0\n          }\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Post',\n        id: \"LIST\"\n      }]\n    }),\n    updatePost: builder.mutation({\n      query: initialPost => ({\n        url: `/posts/${initialPost.id}`,\n        method: 'PUT',\n        body: {\n          ...initialPost,\n          date: new Date().toISOString()\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: arg.id\n      }]\n    }),\n    deletePost: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `/posts/${id}`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Post',\n        id: arg.id\n      }]\n    }),\n    addReaction: builder.mutation({\n      query: ({\n        postId,\n        reactions\n      }) => ({\n        url: `posts/${postId}`,\n        method: 'PATCH',\n        body: {\n          reactions\n        }\n      }),\n      async onQueryStarted({\n        postId,\n        reactions\n      }, {\n        dispatch,\n        queryFulfilled\n      }) {\n        const patchResult = dispatch(extendedApiSlice.util.updateQueryData('getPosts', 'getPosts', draft => {\n          const post = draft.entities[postId];\n          if (post) post.reactions = reactions;\n        }));\n        try {\n          await queryFulfilled;\n        } catch {\n          patchResult.undo();\n        }\n      }\n    })\n  })\n});\nexport const {\n  useGetPostsQuery,\n  useGetPostsByUserIdQuery,\n  useAddNewPostMutation,\n  useUpdatePostMutation,\n  useDeletePostMutation,\n  useAddReactionMutation\n} = extendedApiSlice;","map":{"version":3,"names":["createEntityAdapter","sub","apiSlice","postsAdapter","sortComparer","a","b","date","localeCompare","initialState","getInitialState","extendedApiSlice","injectEndpoints","endpoints","builder","getPosts","query","transformResponse","responseData","min","loadedPosts","map","post","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","setAll","providesTags","result","error","arg","type","id","ids","getPostsByUserId","addNewPost","mutation","initialPost","url","method","body","userId","Number","invalidatesTags","updatePost","deletePost","addReaction","postId","onQueryStarted","dispatch","queryFulfilled","patchResult","util","updateQueryData","draft","entities","undo","useGetPostsQuery","useGetPostsByUserIdQuery","useAddNewPostMutation","useUpdatePostMutation","useDeletePostMutation","useAddReactionMutation"],"sources":["C:/Users/KUSANAGI/Videos/BlogPost-main/front-end/src/features/posts/postsSlice.js"],"sourcesContent":["import { createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport { apiSlice } from \"../api/apiSlice\";\n\nconst postsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => b.date.localeCompare(a.date)\n})\n\nconst initialState = postsAdapter.getInitialState()\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getPosts: builder.query({\n            query: () => '/posts',\n            transformResponse: responseData => {\n                let min = 1;\n                const loadedPosts = responseData.map(post => {\n                    if (!post?.date) post.date = sub(new Date(), { minutes: min++ }).toISOString();\n                    if (!post?.reactions) post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n                return postsAdapter.setAll(initialState, loadedPosts)\n            },\n            providesTags: (result, error, arg) => [\n                { type: 'Post', id: \"LIST\" },\n                ...result.ids.map(id => ({ type: 'Post', id }))\n            ]\n        }),\n        getPostsByUserId: builder.query({\n            query: id => `/postsbyuserid/?userId=${id}`,\n            transformResponse: responseData => {\n                let min = 1;\n                const loadedPosts = responseData.map(post => {\n                    if (!post?.date) post.date = sub(new Date(), { minutes: min++ }).toISOString();\n                    if (!post?.reactions) post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n                return postsAdapter.setAll(initialState, loadedPosts)\n            },\n            providesTags: (result, error, arg) => [\n                ...result.ids.map(id => ({ type: 'Post', id }))\n            ]\n        }),\n        addNewPost: builder.mutation({\n            query: initialPost => ({\n                url: '/posts',\n                method: 'POST',\n                body: {\n                    ...initialPost,\n                    userId: Number(initialPost.userId),\n                    date: new Date().toISOString(),\n                    reactions: {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                }\n            }),\n            invalidatesTags: [\n                { type: 'Post', id: \"LIST\" }\n            ]\n        }),\n        updatePost: builder.mutation({\n            query: initialPost => ({\n                url: `/posts/${initialPost.id}`,\n                method: 'PUT',\n                body: {\n                    ...initialPost,\n                    date: new Date().toISOString()\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Post', id: arg.id }\n            ]\n        }),\n        deletePost: builder.mutation({\n            query: ({ id }) => ({\n                url: `/posts/${id}`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Post', id: arg.id }\n            ]\n        }),\n        addReaction: builder.mutation({\n            query: ({ postId, reactions }) => ({\n                url: `posts/${postId}`,\n                method: 'PATCH',\n                body: { reactions }\n            }),\n            async onQueryStarted({ postId, reactions }, { dispatch, queryFulfilled }) {\n                const patchResult = dispatch(\n                    extendedApiSlice.util.updateQueryData('getPosts', 'getPosts', draft => {\n                        const post = draft.entities[postId]\n                        if (post) post.reactions = reactions\n                    })\n                )\n                try {\n                    await queryFulfilled\n                } catch {\n                    patchResult.undo()\n                }\n            }\n        })\n    })\n})\n\nexport const {\n    useGetPostsQuery,\n    useGetPostsByUserIdQuery,\n    useAddNewPostMutation,\n    useUpdatePostMutation,\n    useDeletePostMutation,\n    useAddReactionMutation\n} = extendedApiSlice"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}